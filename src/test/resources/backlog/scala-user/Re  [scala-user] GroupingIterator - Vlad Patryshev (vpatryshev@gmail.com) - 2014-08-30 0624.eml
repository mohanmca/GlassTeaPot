Delivered-To: gnani.swami@gmail.com
Received: by 10.25.170.147 with SMTP id t141csp250667lfe;
        Fri, 29 Aug 2014 15:25:09 -0700 (PDT)
Return-Path: <scala-user+bncBD775REH6MMRBQP3QOQAKGQEJOCZDOA@googlegroups.com>
Received-SPF: pass (google.com: domain of scala-user+bncBD775REH6MMRBQP3QOQAKGQEJOCZDOA@googlegroups.com designates 10.50.79.201 as permitted sender) client-ip=10.50.79.201
Authentication-Results: mr.google.com;
       spf=pass (google.com: domain of scala-user+bncBD775REH6MMRBQP3QOQAKGQEJOCZDOA@googlegroups.com designates 10.50.79.201 as permitted sender) smtp.mail=scala-user+bncBD775REH6MMRBQP3QOQAKGQEJOCZDOA@googlegroups.com;
       dkim=pass header.i=@googlegroups.com
X-Received: from mr.google.com ([10.50.79.201])
        by 10.50.79.201 with SMTP id l9mr948679igx.11.1409351109570 (num_hops = 1);
        Fri, 29 Aug 2014 15:25:09 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=20120806;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc:x-original-sender:x-original-authentication-results:precedence
         :mailing-list:list-id:list-post:list-help:list-archive:sender
         :list-subscribe:list-unsubscribe:content-type;
        bh=wpVSHT5owWyR/CEpTyyTScQO7p9f9AIOH6lU4Qmal58=;
        b=j43h5tyJwTC0c476eKNMUyEfrq9Yxy/W4xMi56SK4EFs/ppoC2bSY5BwTXLo6/LNAS
         x8knol1faoO/9exvXNaoPNE6KaOpDpYtjBTHv2jYqxFT+NZ1FPezslkalgNpazGyuU7O
         ApROcz+NmwdzTOrXfTE7DVBobkgMlyeWj0Q/kyU9//oQgoJfVQOe5Q/jYz1NqH24K9UC
         c9AxIhSxrHk8+lNpAd6k4UMFtD/o2GTfBG1BET723JqDzORnn5XleiL5/hXjDrmGTNdi
         vI/gBxCzXgxRd4GJxJ8a56H/MMJxwqysAV0kQzj7VCW/foPmj/bn2tW87nFrNa2p/ADG
         1Kpw==
X-Received: by 10.50.79.201 with SMTP id l9mr151889igx.11.1409351108947;
        Fri, 29 Aug 2014 15:25:08 -0700 (PDT)
X-BeenThere: scala-user@googlegroups.com
Received: by 10.50.43.135 with SMTP id w7ls634906igl.21.canary; Fri, 29 Aug
 2014 15:25:05 -0700 (PDT)
X-Received: by 10.66.66.3 with SMTP id b3mr7173805pat.6.1409351105652;
        Fri, 29 Aug 2014 15:25:05 -0700 (PDT)
Received: from mail-qg0-x22f.google.com (mail-qg0-x22f.google.com [2607:f8b0:400d:c04::22f])
        by gmr-mx.google.com with ESMTPS id ld1si297033qcb.3.2014.08.29.15.25.05
        for <scala-user@googlegroups.com>
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Fri, 29 Aug 2014 15:25:05 -0700 (PDT)
Received-SPF: pass (google.com: domain of vpatryshev@gmail.com designates 2607:f8b0:400d:c04::22f as permitted sender) client-ip=2607:f8b0:400d:c04::22f;
Received: by mail-qg0-f47.google.com with SMTP id z60so2895444qgd.20
        for <scala-user@googlegroups.com>; Fri, 29 Aug 2014 15:25:05 -0700 (PDT)
X-Received: by 10.229.136.133 with SMTP id r5mr22288458qct.31.1409351105458;
 Fri, 29 Aug 2014 15:25:05 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.224.39.139 with HTTP; Fri, 29 Aug 2014 15:24:45 -0700 (PDT)
In-Reply-To: <CAC_CU1hFV7Ypswx8ecP3haE4v=3YOqeSUuZoEAfWJefbr2QXoA@mail.gmail.com>
References: <49637b93-b350-447f-bc41-1c8b11b033d7@googlegroups.com>
 <CAA_Y42wAi7=R5aFrEPb=yKF8BuxcgZg66EJUMA1qxGt+e8dHjg@mail.gmail.com>
 <CAPaMnL4QSwP42cnQATGVVXcO-WBWbj_Eut=HwEZ2Xgm+624zOw@mail.gmail.com> <CAC_CU1hFV7Ypswx8ecP3haE4v=3YOqeSUuZoEAfWJefbr2QXoA@mail.gmail.com>
From: Vlad Patryshev <vpatryshev@gmail.com>
Date: Fri, 29 Aug 2014 15:24:45 -0700
Message-ID: <CAFhNTo-L2wg3Pwnvvi1TfWbCi7SAMDzjbOuo6U8C54Zp0qTQXw@mail.gmail.com>
Subject: Re: [scala-user] GroupingIterator
To: Pedro Larroy <pedro.larroy.lists@gmail.com>
Cc: Som Snytt <som.snytt@gmail.com>, atomly <atomly@gmail.com>, 
	scala-user <scala-user@googlegroups.com>
X-Original-Sender: vpatryshev@gmail.com
X-Original-Authentication-Results: gmr-mx.google.com;       spf=pass
 (google.com: domain of vpatryshev@gmail.com designates 2607:f8b0:400d:c04::22f
 as permitted sender) smtp.mail=vpatryshev@gmail.com;       dkim=pass
 header.i=@gmail.com;       dmarc=pass (p=NONE dis=NONE) header.from=gmail.com
Precedence: list
Mailing-list: list scala-user@googlegroups.com; contact scala-user+owners@googlegroups.com
List-ID: <scala-user.googlegroups.com>
X-Google-Group-Id: 163218044152
List-Post: <http://groups.google.com/group/scala-user/post>, <mailto:scala-user@googlegroups.com>
List-Help: <http://groups.google.com/support/>, <mailto:scala-user+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/scala-user
Sender: scala-user@googlegroups.com
List-Subscribe: <http://groups.google.com/group/scala-user/subscribe>, <mailto:scala-user+subscribe@googlegroups.com>
List-Unsubscribe: <mailto:googlegroups-manage+163218044152+unsubscribe@googlegroups.com>,
 <http://groups.google.com/group/scala-user/subscribe>
Content-Type: multipart/alternative; boundary=001a1135f3e8013b2f0501cc20a4

--001a1135f3e8013b2f0501cc20a4
Content-Type: text/plain; charset=UTF-8

I have in my library an implementation that is not very efficient, but is
ok as a prototype:

  /**

   * Grouping a list by a binary relationship, splitting it into segments
where neighbors satisfy p

   * @param xs the list to split

   * @param p the predicate (T,T) => Boolean

   * @tparam T whatever the type of list elements is

   * @return list of groups, List[List[T] ]

   */

  def groupByRelationship[T](p: (T,T) => Boolean)(xs: Traversable[T]) = {

    val (seg,acc) = ((List[T](),List[List[T]]()) /: xs) {

      case ((y::ys, a), x) if p(y,x) => (x ::y ::ys, a)

      case (   (ys, a), x)           => (x::Nil, ys.reverse::a)

    }

    (seg.reverse::acc).reverse drop 1

  }


Thanks,
-Vlad


On Fri, Aug 29, 2014 at 3:10 PM, Pedro Larroy <pedro.larroy.lists@gmail.com>
wrote:

> Som: exactly, we have found this idea quite useful, to group items
> according to a predicate that refers to the items being grouped. Would
> there be interest in adding it to the library?
>
>
> On Fri, Aug 29, 2014 at 10:44 PM, Som Snytt <som.snytt@gmail.com> wrote:
>
>> Iterator.GroupedIterator bills itself as "flexible," but not this
>> flexible.
>>
>> scala> (1 to 10).toIterator slideBy ((i: Int, is: Seq[Int]) => is.sum + i
>> <= 10)
>> res6: Iterator[IndexedSeq[Int]] = non-empty iterator
>>
>> scala> res6.mkString(",")
>> res7: String = Vector(1, 2, 3,
>> 4),Vector(5),Vector(6),Vector(7),Vector(8),Vector(9),Vector(10)
>>
>> It just needs an optional stepping predicate.
>>
>>
>> On Fri, Aug 29, 2014 at 9:43 AM, atomly <atomly@gmail.com> wrote:
>>
>>> I'm a little confused... This functionality wouldn't be satisfied by
>>> Iterable.groupBy or Iterable.partition?
>>>
>>> Are you saying there are potentially more than two groups and it would
>>> start a new group each time it returned false?
>>>
>>> :: atomly ::
>>>
>>> [ atomly@atomly.com : www.atomly.com  : http://blog.atomly.com/ ...
>>> [ atomiq records : new york city : +1.347.692.8661 ...
>>> [ e-mail atomly-news-subscribe@atomly.com for atomly info and updates
>>> ...
>>>
>>>
>>> On Thu, Aug 28, 2014 at 12:05 PM, Pedro Larroy <
>>> pedro.larroy.lists@gmail.com> wrote:
>>>
>>>> Hi
>>>>
>>>> would it be interesting to include a grouping iterator given a
>>>> predicate and previous elements to get an iterable of seq given an iterator?
>>>>
>>>>
>>>> The code would be something like the following one.
>>>>
>>>>
>>>> Regards.
>>>>
>>>> Pedro.
>>>>
>>>>
>>>>
>>>>     import scala.collection.mutable.ArrayBuffer
>>>>
>>>>     object GroupingIterator {
>>>>
>>>>       /**
>>>>        * Create a new GroupingIterator with a grouping predicate.
>>>>        *
>>>>        * @param it The original iterator
>>>>        * @param p Predicate controlling the grouping
>>>>        * @tparam A Type of elements iterated
>>>>        * @return A new GroupingIterator
>>>>        */
>>>>       def apply[A](it: Iterator[A])(p: (A, IndexedSeq[A]) => Boolean):
>>>> GroupingIterator[A] =
>>>>         new GroupingIterator(it)(p)
>>>>     }
>>>>
>>>>     /**
>>>>      * Group elements in sequences of contiguous elements that satisfy
>>>> a predicate. The predicate
>>>>      * tests each single potential next element of the group with the
>>>> help of the elements grouped so far.
>>>>      * If it returns true, the potential next element is added to the
>>>> group, otherwise
>>>>      * a new group is started with the potential next element as first
>>>> element
>>>>      *
>>>>      * @param self The original iterator
>>>>      * @param p Predicate controlling the grouping
>>>>      * @tparam A Type of elements iterated
>>>>      */
>>>>     class GroupingIterator[+A](self: Iterator[A])(p: (A, IndexedSeq[A])
>>>> => Boolean) extends Iterator[IndexedSeq[A]] {
>>>>
>>>>       private[this] val source = self.buffered
>>>>       private[this] val buffer: ArrayBuffer[A] = ArrayBuffer()
>>>>
>>>>       def hasNext: Boolean = source.hasNext
>>>>
>>>>       def next(): IndexedSeq[A] = {
>>>>         if (hasNext)
>>>>           nextGroup()
>>>>         else
>>>>           Iterator.empty.next()
>>>>       }
>>>>
>>>>       private[this] def nextGroup(): IndexedSeq[A] = {
>>>>         assert(source.hasNext)
>>>>
>>>>         buffer.clear()
>>>>         buffer += source.next
>>>>
>>>>         while (source.hasNext && p(source.head, buffer)) {
>>>>           buffer += source.next
>>>>         }
>>>>
>>>>         buffer.toIndexedSeq
>>>>       }
>>>>     }
>>>>
>>>> --
>>>> You received this message because you are subscribed to the Google
>>>> Groups "scala-user" group.
>>>> To unsubscribe from this group and stop receiving emails from it, send
>>>> an email to scala-user+unsubscribe@googlegroups.com.
>>>> For more options, visit https://groups.google.com/d/optout.
>>>>
>>>
>>>  --
>>> You received this message because you are subscribed to the Google
>>> Groups "scala-user" group.
>>> To unsubscribe from this group and stop receiving emails from it, send
>>> an email to scala-user+unsubscribe@googlegroups.com.
>>> For more options, visit https://groups.google.com/d/optout.
>>>
>>
>>
>  --
> You received this message because you are subscribed to the Google Groups
> "scala-user" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to scala-user+unsubscribe@googlegroups.com.
> For more options, visit https://groups.google.com/d/optout.
>

-- 
You received this message because you are subscribed to the Google Groups "scala-user" group.
To unsubscribe from this group and stop receiving emails from it, send an email to scala-user+unsubscribe@googlegroups.com.
For more options, visit https://groups.google.com/d/optout.

--001a1135f3e8013b2f0501cc20a4
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I have in my library an implementation that is not very ef=
ficient, but is ok as a prototype:<div><div><div><p class=3D""><font size=
=3D"1" face=3D"courier new, monospace">=C2=A0 /**<br></font></p><p class=3D=
""><font size=3D"1" face=3D"courier new, monospace">=C2=A0=C2=A0 * Grouping=
 a list by a binary relationship, splitting it into segments where neighbor=
s satisfy p</font></p>

<p class=3D""><font size=3D"1" face=3D"courier new, monospace">=C2=A0 =C2=
=A0* @param xs the list to split</font></p><p class=3D""><font size=3D"1" f=
ace=3D"courier new, monospace">=C2=A0 =C2=A0* @param p the predicate (T,T) =
=3D&gt; Boolean</font></p><p class=3D"">

<font size=3D"1" face=3D"courier new, monospace">=C2=A0 =C2=A0* @tparam T w=
hatever the type of list elements is</font></p><p class=3D""><font size=3D"=
1" face=3D"courier new, monospace">=C2=A0 =C2=A0* @return list of groups, L=
ist[List[T] ]</font></p><p class=3D"">

<font size=3D"1" face=3D"courier new, monospace">=C2=A0 =C2=A0*/</font></p>=
<p class=3D""><font size=3D"1" face=3D"courier new, monospace">=C2=A0 def g=
roupByRelationship[T](p: (T,T) =3D&gt; Boolean)(xs: Traversable[T]) =3D {</=
font></p><p class=3D""><font size=3D"1" face=3D"courier new, monospace">=C2=
=A0 =C2=A0 val (seg,acc) =3D ((List[T](),List[List[T]]()) /: xs) {</font></=
p>

<p class=3D""><font size=3D"1" face=3D"courier new, monospace">=C2=A0 =C2=
=A0 =C2=A0 case ((y::ys, a), x) if p(y,x) =3D&gt; (x ::y ::ys, a)</font></p=
><p class=3D""><font size=3D"1" face=3D"courier new, monospace">=C2=A0 =C2=
=A0 =C2=A0 case ( =C2=A0 (ys, a), x) =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =3D=
&gt; (x::Nil, ys.reverse::a)</font></p>

<p class=3D""><font size=3D"1" face=3D"courier new, monospace">=C2=A0 =C2=
=A0 }</font></p><p class=3D""><font size=3D"1" face=3D"courier new, monospa=
ce">=C2=A0 =C2=A0 (seg.reverse::acc).reverse drop 1</font></p><p class=3D""=
><font size=3D"1" face=3D"courier new, monospace">=C2=A0 }</font></p>

</div></div></div><div><br></div></div><div class=3D"gmail_extra"><br clear=
=3D"all"><div>Thanks,<br>-Vlad</div>
<br><br><div class=3D"gmail_quote">On Fri, Aug 29, 2014 at 3:10 PM, Pedro L=
arroy <span dir=3D"ltr">&lt;<a href=3D"mailto:pedro.larroy.lists@gmail.com"=
 target=3D"_blank">pedro.larroy.lists@gmail.com</a>&gt;</span> wrote:<br><b=
lockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px =
#ccc solid;padding-left:1ex">

<div dir=3D"ltr">Som: exactly, we have found this idea quite useful, to gro=
up items according to a predicate that refers to the items being grouped. W=
ould there be interest in adding it to the library?</div><div class=3D"HOEn=
Zb">

<div class=3D"h5"><div class=3D"gmail_extra">
<br><br><div class=3D"gmail_quote">On Fri, Aug 29, 2014 at 10:44 PM, Som Sn=
ytt <span dir=3D"ltr">&lt;<a href=3D"mailto:som.snytt@gmail.com" target=3D"=
_blank">som.snytt@gmail.com</a>&gt;</span> wrote:<br><blockquote class=3D"g=
mail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=
eft:1ex">


<div dir=3D"ltr"><div><div><div>Iterator.GroupedIterator bills itself as &q=
uot;flexible,&quot; but not this flexible.<br><br></div><span style=3D"font=
-family:courier new,monospace">scala&gt; (1 to 10).toIterator slideBy ((i: =
Int, is: Seq[Int]) =3D&gt; is.sum + i &lt;=3D 10) <br>



res6: Iterator[IndexedSeq[Int]] =3D non-empty iterator<br><br>scala&gt; res=
6.mkString(&quot;,&quot;)<br>res7: String =3D Vector(1, 2, 3, 4),Vector(5),=
Vector(6),Vector(7),Vector(8),Vector(9),Vector(10)</span><br><br></div></di=
v>



<div>It just needs an optional stepping predicate.<br></div></div><div><div=
><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Fri, Aug =
29, 2014 at 9:43 AM, atomly <span dir=3D"ltr">&lt;<a href=3D"mailto:atomly@=
gmail.com" target=3D"_blank">atomly@gmail.com</a>&gt;</span> wrote:<br>



<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div dir=3D"ltr">I&#39;m a little confused..=
. This functionality wouldn&#39;t be satisfied by Iterable.groupBy or Itera=
ble.partition?<div>



<br></div><div>Are you saying there are potentially more than two groups an=
d it would start a new group each time it returned false?</div>

</div><div class=3D"gmail_extra"><br clear=3D"all"><div>:: atomly ::<br><br=
>[ <a href=3D"mailto:atomly@atomly.com" target=3D"_blank">atomly@atomly.com=
</a> : <a href=3D"http://www.atomly.com" target=3D"_blank">www.atomly.com</=
a>=C2=A0 : <a href=3D"http://blog.atomly.com/" target=3D"_blank">http://blo=
g.atomly.com/</a> ...<br>





[ atomiq records : new york city : <a href=3D"tel:%2B1.347.692.8661" value=
=3D"+13476928661" target=3D"_blank">+1.347.692.8661</a> ...<br>[ e-mail <a =
href=3D"mailto:atomly-news-subscribe@atomly.com" target=3D"_blank">atomly-n=
ews-subscribe@atomly.com</a> for atomly info and updates ...</div>



<div><div>
<br><br><div class=3D"gmail_quote">On Thu, Aug 28, 2014 at 12:05 PM, Pedro =
Larroy <span dir=3D"ltr">&lt;<a href=3D"mailto:pedro.larroy.lists@gmail.com=
" target=3D"_blank">pedro.larroy.lists@gmail.com</a>&gt;</span> wrote:<br><=
blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px=
 #ccc solid;padding-left:1ex">





<div dir=3D"ltr">Hi<div><br></div><div>would it be interesting to include a=
 grouping iterator given a predicate and previous elements to get an iterab=
le of seq given an iterator?</div><div><br></div><div><br></div><div>The co=
de would be something like the following one.</div>





<div><br></div><div><br>Regards.</div><div><br></div><div>Pedro.</div><div>=
<br></div><div><br></div><div><br></div><div><div>=C2=A0 =C2=A0 import scal=
a.collection.mutable.ArrayBuffer</div><div>=C2=A0 =C2=A0=C2=A0</div><div>=
=C2=A0 =C2=A0 object GroupingIterator {</div>





<div>=C2=A0 =C2=A0=C2=A0</div><div>=C2=A0 =C2=A0 =C2=A0 /**</div><div>=C2=
=A0 =C2=A0 =C2=A0 =C2=A0* Create a new GroupingIterator with a grouping pre=
dicate.</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0*</div><div>=C2=A0 =C2=A0 =C2=
=A0 =C2=A0* @param it The original iterator</div><div>=C2=A0 =C2=A0 =C2=A0 =
=C2=A0* @param p Predicate controlling the grouping</div>





<div>=C2=A0 =C2=A0 =C2=A0 =C2=A0* @tparam A Type of elements iterated</div>=
<div>=C2=A0 =C2=A0 =C2=A0 =C2=A0* @return A new GroupingIterator</div><div>=
=C2=A0 =C2=A0 =C2=A0 =C2=A0*/</div><div>=C2=A0 =C2=A0 =C2=A0 def apply[A](i=
t: Iterator[A])(p: (A, IndexedSeq[A]) =3D&gt; Boolean): GroupingIterator[A]=
 =3D</div>





<div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 new GroupingIterator(it)(p)</div><div>=C2=
=A0 =C2=A0 }</div><div>=C2=A0 =C2=A0=C2=A0</div><div>=C2=A0 =C2=A0 /**</div=
><div>=C2=A0 =C2=A0 =C2=A0* Group elements in sequences of contiguous eleme=
nts that satisfy a predicate. The predicate</div><div>=C2=A0 =C2=A0 =C2=A0*=
 tests each single potential next element of the group with the help of the=
 elements grouped so far.</div>





<div>=C2=A0 =C2=A0 =C2=A0* If it returns true, the potential next element i=
s added to the group, otherwise</div><div>=C2=A0 =C2=A0 =C2=A0* a new group=
 is started with the potential next element as first element</div><div>=C2=
=A0 =C2=A0 =C2=A0*</div><div>=C2=A0 =C2=A0 =C2=A0* @param self The original=
 iterator</div>





<div>=C2=A0 =C2=A0 =C2=A0* @param p Predicate controlling the grouping</div=
><div>=C2=A0 =C2=A0 =C2=A0* @tparam A Type of elements iterated</div><div>=
=C2=A0 =C2=A0 =C2=A0*/</div><div>=C2=A0 =C2=A0 class GroupingIterator[+A](s=
elf: Iterator[A])(p: (A, IndexedSeq[A]) =3D&gt; Boolean) extends Iterator[I=
ndexedSeq[A]] {</div>





<div>=C2=A0 =C2=A0=C2=A0</div><div>=C2=A0 =C2=A0 =C2=A0 private[this] val s=
ource =3D self.buffered</div><div>=C2=A0 =C2=A0 =C2=A0 private[this] val bu=
ffer: ArrayBuffer[A] =3D ArrayBuffer()</div><div>=C2=A0 =C2=A0=C2=A0</div><=
div>=C2=A0 =C2=A0 =C2=A0 def hasNext: Boolean =3D source.hasNext</div><div>=
=C2=A0 =C2=A0=C2=A0</div>





<div>=C2=A0 =C2=A0 =C2=A0 def next(): IndexedSeq[A] =3D {</div><div>=C2=A0 =
=C2=A0 =C2=A0 =C2=A0 if (hasNext)</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 nextGroup()</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 else</div><div>=C2=A0=
 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Iterator.empty.next()</div><div>=C2=A0 =C2=A0 =
=C2=A0 }</div><div>=C2=A0 =C2=A0=C2=A0</div><div>=C2=A0 =C2=A0 =C2=A0 priva=
te[this] def nextGroup(): IndexedSeq[A] =3D {</div>





<div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 assert(source.hasNext)</div><div>=C2=A0 =
=C2=A0=C2=A0</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 buffer.clear()</div><div=
>=C2=A0 =C2=A0 =C2=A0 =C2=A0 buffer +=3D source.next</div><div>=C2=A0 =C2=
=A0=C2=A0</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 while (source.hasNext &amp;=
&amp; p(source.head, buffer)) {</div>





<div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 buffer +=3D source.next</div><div>=
=C2=A0 =C2=A0 =C2=A0 =C2=A0 }</div><div>=C2=A0 =C2=A0=C2=A0</div><div>=C2=
=A0 =C2=A0 =C2=A0 =C2=A0 buffer.toIndexedSeq</div><div>=C2=A0 =C2=A0 =C2=A0=
 }</div><div>=C2=A0 =C2=A0 }</div></div></div><span><font color=3D"#888888"=
>

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;scala-user&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:scala-user+unsubscribe@googlegroups.com" target=
=3D"_blank">scala-user+unsubscribe@googlegroups.com</a>.<br>
For more options, visit <a href=3D"https://groups.google.com/d/optout" targ=
et=3D"_blank">https://groups.google.com/d/optout</a>.<br>
</font></span></blockquote></div><br></div></div></div><div><div>

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;scala-user&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:scala-user+unsubscribe@googlegroups.com" target=
=3D"_blank">scala-user+unsubscribe@googlegroups.com</a>.<br>
For more options, visit <a href=3D"https://groups.google.com/d/optout" targ=
et=3D"_blank">https://groups.google.com/d/optout</a>.<br>
</div></div></blockquote></div><br></div>
</div></div></blockquote></div><br></div>

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;scala-user&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:scala-user+unsubscribe@googlegroups.com" target=
=3D"_blank">scala-user+unsubscribe@googlegroups.com</a>.<br>
For more options, visit <a href=3D"https://groups.google.com/d/optout" targ=
et=3D"_blank">https://groups.google.com/d/optout</a>.<br>
</div></div></blockquote></div><br></div>

<p></p>

-- <br />
You received this message because you are subscribed to the Google Groups &=
quot;scala-user&quot; group.<br />
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:scala-user+unsubscribe@googlegroups.com">scala-us=
er+unsubscribe@googlegroups.com</a>.<br />
For more options, visit <a href=3D"https://groups.google.com/d/optout">http=
s://groups.google.com/d/optout</a>.<br />

--001a1135f3e8013b2f0501cc20a4--
